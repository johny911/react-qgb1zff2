/* eslint-env serviceworker */
/* eslint-disable no-restricted-globals */

// --- Workbox imports ---
import { clientsClaim } from 'workbox-core';
import {
  precacheAndRoute,
  cleanupOutdatedCaches,
  createHandlerBoundToURL,
} from 'workbox-precaching';
import { registerRoute, NavigationRoute } from 'workbox-routing';
import { StaleWhileRevalidate, NetworkFirst, CacheFirst } from 'workbox-strategies';

// Take control ASAP
self.skipWaiting();
clientsClaim();

/**
 * Precache the assets generated by your build. The array will be
 * injected at build time by Workbox (self.__WB_MANIFEST).
 */
precacheAndRoute(self.__WB_MANIFEST || []);
cleanupOutdatedCaches();

/**
 * App-shell style navigation routing:
 *  - Serves index.html for navigation requests (no file extension)
 *  - Skips anything under /api/ or URLs with extensions (e.g., .png, .js)
 */
registerRoute(
  new NavigationRoute(createHandlerBoundToURL('/index.html'), {
    // Allow the root and normal client-side routes
    allowlist: [/^\/$/],

    // Deny API calls and any path that looks like a static file
    denylist: [
      /\/api\//i,
      /\.[^/]+$/i, // has an extension (e.g., .png, .js, .css)
    ],
  })
);

/**
 * Static resources (JS/CSS/Workers): Stale-While-Revalidate for snappy loads.
 */
registerRoute(
  ({ request }) =>
    request.destination === 'script' ||
    request.destination === 'style' ||
    request.destination === 'worker',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
  })
);

/**
 * Images: Cache First (with implicit revision based on URL). Good for logos, icons, etc.
 */
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    matchOptions: { ignoreSearch: true },
  })
);

/**
 * Optional: Network First for same-origin GET /api/* responses
 * (If you don’t have a REST endpoint, you can remove this block.)
 */
registerRoute(
  ({ url, request }) =>
    request.method === 'GET' &&
    url.origin === self.location.origin &&
    url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api',
    networkTimeoutSeconds: 5,
  })
);

/**
 * Support “Update available” flows from your UI:
 * postMessage({ type: 'SKIP_WAITING' }) to activate the new SW immediately.
 */
self.addEventListener('message', (event) => {
  if (event?.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});